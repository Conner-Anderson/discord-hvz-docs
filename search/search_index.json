{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Documentation for Discord-HVZ \u00b6 Discord-HVZ is a run-it-yourself Discord bot that helps run Humans vs. Zombies games. This documentation contains everything you need to manage an HVZ game with the help of Discord . For information about HvZ: humansvszombies.org Summary \u00b6 This bot was developed to run HvZ games at LeTourneau University in Texas, but is now published for use anywhere. A version of it has been used each semester at LeTourneau since Fall 2019. It is a simple and streamlined system designed to leverage the easy-to-use features of Discord which already manages accounts, permissions, and messaging. It was developed in response to the popular service HvZ SOURCE going offline. Features \u00b6 Registers players for the game through a questionnaire Accepts tag reports from players by validating tags, changing player factions, and announcing the tag to all players Displays the zombie tag geneology and other statistics Displays player and tag information in a live Google Sheet for easy administration Fully supports both desktop and mobile users Includes many commands for managing the game Includes configuration options and customizable questionnaires Works on existing Discord servers without disrupting non-players Works on Windows, Linux, and Mac, though the docs are written for Windows Written in Python, potentially aiding personalization Prerequisites \u00b6 Mild tech-saviness. You must have dabbled in coding at some point, are not afraid of a command-prompt, and are willing to read a few StackOverflow pages if things don't go quite right. A Discord account that owns the server you want to run the bot on. You could also just get the owner to do a few setup steps for you. A Google account to access the Google Sheet and the Sheets API. A computer with an internet connection that can run the bot for the entire game. For example, you may leave your desktop on, borrow someone's old laptop, or use a Raspberry Pi in the closet. This documentation is written for a Windows PC, but with a little translation, should work fine for Linux or Mac. This software is for HvZ admin teams willing to do a bit of legwork to set it up, giving you an HvZ system entirely under your control. Get Started \u00b6 Setup \u2003 \u2003 \u2003 \u2003 \u2003 \u2003 Start from scratch in getting the bot running. Running the Game \u2003 Learn the process of running a game with Discord-HvZ. Commands \u2003 \u2003 \u2003 \u2003 Reference the bot's commands. Development \u00b6 Hey! I'm Conner, and I wrote this bot. I did it to support the game I love at my alma-mater and also to learn how to write better software. If people actually use this to run HvZ games, I'll keep adding features and fixing bugs! I also offer support for anyone at conneranderson.dev@gmail.com","title":"Home"},{"location":"#documentation-for-discord-hvz","text":"Discord-HVZ is a run-it-yourself Discord bot that helps run Humans vs. Zombies games. This documentation contains everything you need to manage an HVZ game with the help of Discord . For information about HvZ: humansvszombies.org","title":"Documentation for Discord-HVZ"},{"location":"#summary","text":"This bot was developed to run HvZ games at LeTourneau University in Texas, but is now published for use anywhere. A version of it has been used each semester at LeTourneau since Fall 2019. It is a simple and streamlined system designed to leverage the easy-to-use features of Discord which already manages accounts, permissions, and messaging. It was developed in response to the popular service HvZ SOURCE going offline.","title":"Summary"},{"location":"#features","text":"Registers players for the game through a questionnaire Accepts tag reports from players by validating tags, changing player factions, and announcing the tag to all players Displays the zombie tag geneology and other statistics Displays player and tag information in a live Google Sheet for easy administration Fully supports both desktop and mobile users Includes many commands for managing the game Includes configuration options and customizable questionnaires Works on existing Discord servers without disrupting non-players Works on Windows, Linux, and Mac, though the docs are written for Windows Written in Python, potentially aiding personalization","title":"Features"},{"location":"#prerequisites","text":"Mild tech-saviness. You must have dabbled in coding at some point, are not afraid of a command-prompt, and are willing to read a few StackOverflow pages if things don't go quite right. A Discord account that owns the server you want to run the bot on. You could also just get the owner to do a few setup steps for you. A Google account to access the Google Sheet and the Sheets API. A computer with an internet connection that can run the bot for the entire game. For example, you may leave your desktop on, borrow someone's old laptop, or use a Raspberry Pi in the closet. This documentation is written for a Windows PC, but with a little translation, should work fine for Linux or Mac. This software is for HvZ admin teams willing to do a bit of legwork to set it up, giving you an HvZ system entirely under your control.","title":"Prerequisites"},{"location":"#get-started","text":"Setup \u2003 \u2003 \u2003 \u2003 \u2003 \u2003 Start from scratch in getting the bot running. Running the Game \u2003 Learn the process of running a game with Discord-HvZ. Commands \u2003 \u2003 \u2003 \u2003 Reference the bot's commands.","title":"Get Started"},{"location":"#development","text":"Hey! I'm Conner, and I wrote this bot. I did it to support the game I love at my alma-mater and also to learn how to write better software. If people actually use this to run HvZ games, I'll keep adding features and fixing bugs! I also offer support for anyone at conneranderson.dev@gmail.com","title":"Development"},{"location":"commands/","text":"Commands \u00b6 Overview \u00b6 Discord's Slash Commands provide a robust way to control the bot. You can start composing a command by typing / in any channel the bot has access to, which will bring up a list of available commands. Finish typing what you want, or select the command in the list. Commands are grouped into categories such as member and tag to stay organized. For example, to list members, use the sub-command of member like this: /member list . Most commands have arguments to supply, which Discord will prompt you to do fill-in-the-blank style. If asked to supply a member, you can start typing their name to select from a list. Most arguments will tell you what kind of response they expect, and if they are optional. In this documentation, arguments for commands are annotated like this: <input> means the argument is required, and you supply the contents. [input] means the argument is optional, and you supply the contents. input means you need to type \"input\" exactly as shown. ... means there are some arguments not listed that you can infer logically. Standalone Commands \u00b6 code \u00b6 /code Replies to a player with their own tag code in an \"ephemeral\" message only they can see, in case they lose it. This tag code is needed for zombies to log their tag. config \u00b6 /config <setting> [choice] Manipulates certain important configuration settings. Displays the current setting if no choice is given, and changes the setting if it is. Add settings here oz \u00b6 /oz <member> [setting] Reports whether or not a member is an OZ (original zombie), and changes their OZ status if setting is supplied. An OZ is defined as a player who is set as one in the database. This status has no bearing on the game, but is useful for tracking purposes. When an OZ is added with this command, they are given specific permission to access the zombie-chat and report-tags channels. This permission is invisible to other server members, and so can be kept secret. When an OZ is removed, these specific permissions are removed as well. You don't need OZs to run the game. Manually giving a player (even a human) access to the tag logging button is enough to get things started. See the silent-oz config option. post_button \u00b6 /post_button [text] [button_1] [button_2] ... [button_5] Sends a message in this channel that contains one or multiple buttons that will start one of the chatbots. It will also contain text if you choose. There is no limit to the number of the same button that can exist in a guild, and they can be deleted at any time. By default, the bot comes with two chatbot buttons: registration and tag_logging. post_panel \u00b6 /post_panel <element1> [element 2] ... [element 6] [static] A panel is a special message with attached game information, each of which is called an element . A panel can have multiple elements, such as the number of humans, number of zombies, players registered today, etc. There's a special element called GamePlotElement which displays a plot of human and zombie populations over the course of the game. The static option is by default false , which means the panel will keep its values up to date with the current game. If true , it will never change. Bug The GamePlotElement is a complex and really cool plot that has some issues right now. Check first to see if it works before showing players. shutdown \u00b6 /shutdown [force] Shuts down the bot, which must be restarted from the computer it is running on. If there are any chatbots running, they will be listed, and the bot will not shutdown. If force is supplied as true , the bot will shut down anyways, closing any chatbots. The members using those chatbots will be notified, and will need to start over. Member Commands \u00b6 member list \u00b6 /member list Lists all members. Generally, looking at the Google Sheet is a better option. member register \u00b6 /member register <member> Starts a registration chatbot with you on behalf of the selected member. You will answer all questions, but the member you selected will be actually registered. Helpful if the chatbot is acting up for someone, or they were accidentally deleted from the game. member delete \u00b6 /member delete <member> Removes the selected member from the game. They remain on the server and in tag records, but are removed from as a member from the database and have their game roles revoked. Will probably mess up some game statistics... Bug Cannot currently delete members no longer on the server. member edit \u00b6 /member edit <member> <attribute> <value> An advanced command to directly edit a member in the database. You should consult the Google Sheet before using this. attribute must exactly match the database column to change, as seen on the Google Sheet. value is the new value. The command does not check if this is a valid value! Warning This command does not yet support changing dates. It might work... but it might not. Use a database editor like DB Browser for SQLite to change dates until this feature is added. Tag Commands \u00b6 tag create \u00b6 /tag create <member> Starts a tag logging chatbot with you on behalf of the selected member. You will answer all questions, but the member you selected will actually make the tag. Helpful if the chatbot is acting up for someone, or if they just can't get to a device. tag delete \u00b6 /tag delete <tag_id> Deletes a tag log by its tag_id , as viewable on the Google Sheet. If the target of the deleted tag has no more tags against them, they are reverted to human. Remember, if you don't like this functionality, you can always swap their roles back via Discord. tag revoke \u00b6 /tag revoke <tag_id> Identical in behavior to tag delete , except instead of removing the tag, it is labeled as revoked . Statistics reporters such as tag tree will ignore the tag, and so can you when reading the Google Sheet. This is a more elegant way to remove a tag during a questionable dispute. tag restore \u00b6 /tag restore <tag_id> Restores a tag that has been revoked. Turns the tagged member back into a zombie. tag edit \u00b6 /tag edit <member> <attribute> <value> An advanced command to directly edit a tag in the database. You should consult the Google Sheet before using this. attribute must exactly match the database column to change, as seen on the Google Sheet. value is the new value. The command does not check if this is a valid value! Warning This command does not yet support changing dates. It might work... but it might not. Use a database editor like DB Browser for SQLite to change dates until this feature is added. tag tree \u00b6 /tag tree Trust me, this is your players' favorite command. It will post a geneology of zombies, showing who tagged whom. If the message overflows the 2000 character limit for messages, the message paginate with buttons to navigate the pages. Warning If the pagination feature is needed, the pages will not be navigable after the bot restarts. This is a potential thing to fix in the future. Item Commands \u00b6 Info The item tracking system is new and quite basic right now. Consider it in beta. item create \u00b6 /item create <name> [starting_player] Creates an item with the specified name. This name can be anything you like. By default, this item is placed into \"storage\", which means it isn't assigned to anyone. You can provide a starting player to give it to immediately. item list \u00b6 /item list [member] Lists all items in the game, their ids, and their owners. If you provide member , it will show only the items owned by that member. item transfer \u00b6 /item transfer <id> <target_player> Transfers an item to a player, regardless of who currently owns it. Use item list to find the right id. item take \u00b6 /item take <id> Moves an item from a player to storage. item rename \u00b6 /item rename <id> <new_name> Renames an item. item delete \u00b6 /item delete <id> Deletes an item. There is no undo. item delete_all \u00b6 /item delete_all <are_you_sure> Completely deletes all items. There is no undo!","title":"Commands"},{"location":"commands/#commands","text":"","title":"Commands"},{"location":"commands/#overview","text":"Discord's Slash Commands provide a robust way to control the bot. You can start composing a command by typing / in any channel the bot has access to, which will bring up a list of available commands. Finish typing what you want, or select the command in the list. Commands are grouped into categories such as member and tag to stay organized. For example, to list members, use the sub-command of member like this: /member list . Most commands have arguments to supply, which Discord will prompt you to do fill-in-the-blank style. If asked to supply a member, you can start typing their name to select from a list. Most arguments will tell you what kind of response they expect, and if they are optional. In this documentation, arguments for commands are annotated like this: <input> means the argument is required, and you supply the contents. [input] means the argument is optional, and you supply the contents. input means you need to type \"input\" exactly as shown. ... means there are some arguments not listed that you can infer logically.","title":"Overview"},{"location":"commands/#standalone-commands","text":"","title":"Standalone Commands"},{"location":"commands/#code","text":"/code Replies to a player with their own tag code in an \"ephemeral\" message only they can see, in case they lose it. This tag code is needed for zombies to log their tag.","title":"code"},{"location":"commands/#config","text":"/config <setting> [choice] Manipulates certain important configuration settings. Displays the current setting if no choice is given, and changes the setting if it is. Add settings here","title":"config"},{"location":"commands/#oz","text":"/oz <member> [setting] Reports whether or not a member is an OZ (original zombie), and changes their OZ status if setting is supplied. An OZ is defined as a player who is set as one in the database. This status has no bearing on the game, but is useful for tracking purposes. When an OZ is added with this command, they are given specific permission to access the zombie-chat and report-tags channels. This permission is invisible to other server members, and so can be kept secret. When an OZ is removed, these specific permissions are removed as well. You don't need OZs to run the game. Manually giving a player (even a human) access to the tag logging button is enough to get things started. See the silent-oz config option.","title":"oz"},{"location":"commands/#post_button","text":"/post_button [text] [button_1] [button_2] ... [button_5] Sends a message in this channel that contains one or multiple buttons that will start one of the chatbots. It will also contain text if you choose. There is no limit to the number of the same button that can exist in a guild, and they can be deleted at any time. By default, the bot comes with two chatbot buttons: registration and tag_logging.","title":"post_button"},{"location":"commands/#post_panel","text":"/post_panel <element1> [element 2] ... [element 6] [static] A panel is a special message with attached game information, each of which is called an element . A panel can have multiple elements, such as the number of humans, number of zombies, players registered today, etc. There's a special element called GamePlotElement which displays a plot of human and zombie populations over the course of the game. The static option is by default false , which means the panel will keep its values up to date with the current game. If true , it will never change. Bug The GamePlotElement is a complex and really cool plot that has some issues right now. Check first to see if it works before showing players.","title":"post_panel"},{"location":"commands/#shutdown","text":"/shutdown [force] Shuts down the bot, which must be restarted from the computer it is running on. If there are any chatbots running, they will be listed, and the bot will not shutdown. If force is supplied as true , the bot will shut down anyways, closing any chatbots. The members using those chatbots will be notified, and will need to start over.","title":"shutdown"},{"location":"commands/#member-commands","text":"","title":"Member Commands"},{"location":"commands/#member-list","text":"/member list Lists all members. Generally, looking at the Google Sheet is a better option.","title":"member list"},{"location":"commands/#member-register","text":"/member register <member> Starts a registration chatbot with you on behalf of the selected member. You will answer all questions, but the member you selected will be actually registered. Helpful if the chatbot is acting up for someone, or they were accidentally deleted from the game.","title":"member register"},{"location":"commands/#member-delete","text":"/member delete <member> Removes the selected member from the game. They remain on the server and in tag records, but are removed from as a member from the database and have their game roles revoked. Will probably mess up some game statistics... Bug Cannot currently delete members no longer on the server.","title":"member delete"},{"location":"commands/#member-edit","text":"/member edit <member> <attribute> <value> An advanced command to directly edit a member in the database. You should consult the Google Sheet before using this. attribute must exactly match the database column to change, as seen on the Google Sheet. value is the new value. The command does not check if this is a valid value! Warning This command does not yet support changing dates. It might work... but it might not. Use a database editor like DB Browser for SQLite to change dates until this feature is added.","title":"member edit"},{"location":"commands/#tag-commands","text":"","title":"Tag Commands"},{"location":"commands/#tag-create","text":"/tag create <member> Starts a tag logging chatbot with you on behalf of the selected member. You will answer all questions, but the member you selected will actually make the tag. Helpful if the chatbot is acting up for someone, or if they just can't get to a device.","title":"tag create"},{"location":"commands/#tag-delete","text":"/tag delete <tag_id> Deletes a tag log by its tag_id , as viewable on the Google Sheet. If the target of the deleted tag has no more tags against them, they are reverted to human. Remember, if you don't like this functionality, you can always swap their roles back via Discord.","title":"tag delete"},{"location":"commands/#tag-revoke","text":"/tag revoke <tag_id> Identical in behavior to tag delete , except instead of removing the tag, it is labeled as revoked . Statistics reporters such as tag tree will ignore the tag, and so can you when reading the Google Sheet. This is a more elegant way to remove a tag during a questionable dispute.","title":"tag revoke"},{"location":"commands/#tag-restore","text":"/tag restore <tag_id> Restores a tag that has been revoked. Turns the tagged member back into a zombie.","title":"tag restore"},{"location":"commands/#tag-edit","text":"/tag edit <member> <attribute> <value> An advanced command to directly edit a tag in the database. You should consult the Google Sheet before using this. attribute must exactly match the database column to change, as seen on the Google Sheet. value is the new value. The command does not check if this is a valid value! Warning This command does not yet support changing dates. It might work... but it might not. Use a database editor like DB Browser for SQLite to change dates until this feature is added.","title":"tag edit"},{"location":"commands/#tag-tree","text":"/tag tree Trust me, this is your players' favorite command. It will post a geneology of zombies, showing who tagged whom. If the message overflows the 2000 character limit for messages, the message paginate with buttons to navigate the pages. Warning If the pagination feature is needed, the pages will not be navigable after the bot restarts. This is a potential thing to fix in the future.","title":"tag tree"},{"location":"commands/#item-commands","text":"Info The item tracking system is new and quite basic right now. Consider it in beta.","title":"Item Commands"},{"location":"commands/#item-create","text":"/item create <name> [starting_player] Creates an item with the specified name. This name can be anything you like. By default, this item is placed into \"storage\", which means it isn't assigned to anyone. You can provide a starting player to give it to immediately.","title":"item create"},{"location":"commands/#item-list","text":"/item list [member] Lists all items in the game, their ids, and their owners. If you provide member , it will show only the items owned by that member.","title":"item list"},{"location":"commands/#item-transfer","text":"/item transfer <id> <target_player> Transfers an item to a player, regardless of who currently owns it. Use item list to find the right id.","title":"item transfer"},{"location":"commands/#item-take","text":"/item take <id> Moves an item from a player to storage.","title":"item take"},{"location":"commands/#item-rename","text":"/item rename <id> <new_name> Renames an item.","title":"item rename"},{"location":"commands/#item-delete","text":"/item delete <id> Deletes an item. There is no undo.","title":"item delete"},{"location":"commands/#item-delete_all","text":"/item delete_all <are_you_sure> Completely deletes all items. There is no undo!","title":"item delete_all"},{"location":"config_options/","text":"Config Options \u00b6 Summary \u00b6 Most configuration for the bot is done in the config.yml file. This is written in YAML format which is made to be very readable. The config file includes helpful explanations within to supplement the information on this page. While you can technically edit it in any text editor, it's more sane to use one designed for code like Notepad++ for Windows that will make the whole experience nicer. When editing the file, your goal should be to follow the pattern . Extra spaces, tabs, and punctuation will likely cause the bot to give an error. In general, never change the text to the left of a colon, as this is the name of a variable the bot is looking for. The exception to this is when you are adding entirely new lines, such as for database_tables . Don't make the name of something just a number. It might technically work, but you're risking the bot mis-interpreting. So don't be cheeky and name your Google Sheet for tags 69 . Likewise, other clever names with odd characters are just not good form. Let text be text here. registration \u00b6 When true , the registration button will launch the chatbot. When false , it will not, and so closes registration. tag_logging \u00b6 When true , the tag_log button will launch the chatbot. When false , it will not, and so closes tag logging. silent_oz \u00b6 When true , the identity of an OZ is not included in tag announcements. This lets you keep who the OZs are a mystery until players see them in the real world. You will likely want to turn this False once the OZs are commonly known. google_sheet_export \u00b6 When true , any changes to the database will be pushed out to the Google Sheet. The bot is designed to use the Google Sheet, so it is not recommended to go without it. If you are having trouble with the Google Sheet and you just need the bot to work, set this to false . As a backup, you can still read the database with an editor such as DB Browser for SQLite . sheet_ids \u00b6 sheet_names \u00b6 These are the names of the sheets within the Google Sheets document that data will be sent to. The variables here match the names of the tables in the database. Example sheet_names : members : Players_Live tags : Tags Live timezone \u00b6 A number representing the timezone the game is occuring in, as an offset from UTC. -7 is US West Coast, -5 is US Central, -4 is US East Coast, Central Europe is +2 With this, the bot could run in a different timezone than the game is played in and still report accurate times. channel_names \u00b6 These settings map specific channels the bot needs to the actual channel names on the server. If these channels aren't specified, the bot will search for the channels that match the names below. The bot will fail to start if it doesn't find a channel. Example channel_names : tag-announcements : zombie-kills report-tags : report-tags-here zombie-chat : zombie-lair bot-output : bot-output tag-announcements \u00b6 The channel where tags are announced. It is recommended that all players can view this, but only admins and the bot can post. report-tags \u00b6 A channel that the tag logging button is posted in. Only zombies should have permission to view this. The bot needs to know about this channel so it can secretly give the OZs access to it. zombie-chat \u00b6 A channel zombies can use to talk to each other in, which only they have access to. The bot needs to know about this channel so it can secretly give the OZs access to it. bot-output \u00b6 The channel the bot can use to output system messages to. Should only be visible to admins, and should be muted. role_names \u00b6 These settings map specific roles the bot needs to the actual role names on the guild. If these roles aren't specified, the bot will search for the roles that match the names below. The bot will fail to start if it doesn't find a role. Example role_names : zombie : Brain Eater human : Brain-Box player : Player zombie \u00b6 Tagged players will get this role and should have access to click the tag logging button. human \u00b6 Tagged players will lose this role and should not have access to click the tag logging button, except for secret OZs. player \u00b6 A role all registered players get. Good for separating game channels from other channels in the guild. database_tables \u00b6 This is a sophisticated set of config options that allows you to define the following: What tables the database has What columns each table has What type of data each column stores The order the columns appear on the Google Sheet A table is a 2-dimensional array of data: like a spreadsheet. Each row is an entry (such as a member or a tag) and each row has the same columns. The bot's database, stored as the file hvzdb.db , contains both tables defined here and behind-the-scenes tables you can't control. The tables defined here collect data from chatbots . The order the columns appear in the config is the order they will appear on the Google Sheet. The bot requires the following tables, columns, and types to function: database_tables : members : id : String name : String faction : String tag_code : String want_bandana : String registration_time : DateTime oz : Boolean tags : tag_id : incrementing_integer tagger_id : String tagger_name : String If any of these are missing from the config, the bot will create them anyways and position them last on the Google Sheet.","title":"Config Options"},{"location":"config_options/#config-options","text":"","title":"Config Options"},{"location":"config_options/#summary","text":"Most configuration for the bot is done in the config.yml file. This is written in YAML format which is made to be very readable. The config file includes helpful explanations within to supplement the information on this page. While you can technically edit it in any text editor, it's more sane to use one designed for code like Notepad++ for Windows that will make the whole experience nicer. When editing the file, your goal should be to follow the pattern . Extra spaces, tabs, and punctuation will likely cause the bot to give an error. In general, never change the text to the left of a colon, as this is the name of a variable the bot is looking for. The exception to this is when you are adding entirely new lines, such as for database_tables . Don't make the name of something just a number. It might technically work, but you're risking the bot mis-interpreting. So don't be cheeky and name your Google Sheet for tags 69 . Likewise, other clever names with odd characters are just not good form. Let text be text here.","title":"Summary"},{"location":"config_options/#registration","text":"When true , the registration button will launch the chatbot. When false , it will not, and so closes registration.","title":"registration"},{"location":"config_options/#tag_logging","text":"When true , the tag_log button will launch the chatbot. When false , it will not, and so closes tag logging.","title":"tag_logging"},{"location":"config_options/#silent_oz","text":"When true , the identity of an OZ is not included in tag announcements. This lets you keep who the OZs are a mystery until players see them in the real world. You will likely want to turn this False once the OZs are commonly known.","title":"silent_oz"},{"location":"config_options/#google_sheet_export","text":"When true , any changes to the database will be pushed out to the Google Sheet. The bot is designed to use the Google Sheet, so it is not recommended to go without it. If you are having trouble with the Google Sheet and you just need the bot to work, set this to false . As a backup, you can still read the database with an editor such as DB Browser for SQLite .","title":"google_sheet_export"},{"location":"config_options/#sheet_ids","text":"","title":"sheet_ids"},{"location":"config_options/#sheet_names","text":"These are the names of the sheets within the Google Sheets document that data will be sent to. The variables here match the names of the tables in the database. Example sheet_names : members : Players_Live tags : Tags Live","title":"sheet_names"},{"location":"config_options/#timezone","text":"A number representing the timezone the game is occuring in, as an offset from UTC. -7 is US West Coast, -5 is US Central, -4 is US East Coast, Central Europe is +2 With this, the bot could run in a different timezone than the game is played in and still report accurate times.","title":"timezone"},{"location":"config_options/#channel_names","text":"These settings map specific channels the bot needs to the actual channel names on the server. If these channels aren't specified, the bot will search for the channels that match the names below. The bot will fail to start if it doesn't find a channel. Example channel_names : tag-announcements : zombie-kills report-tags : report-tags-here zombie-chat : zombie-lair bot-output : bot-output","title":"channel_names"},{"location":"config_options/#tag-announcements","text":"The channel where tags are announced. It is recommended that all players can view this, but only admins and the bot can post.","title":"tag-announcements"},{"location":"config_options/#report-tags","text":"A channel that the tag logging button is posted in. Only zombies should have permission to view this. The bot needs to know about this channel so it can secretly give the OZs access to it.","title":"report-tags"},{"location":"config_options/#zombie-chat","text":"A channel zombies can use to talk to each other in, which only they have access to. The bot needs to know about this channel so it can secretly give the OZs access to it.","title":"zombie-chat"},{"location":"config_options/#bot-output","text":"The channel the bot can use to output system messages to. Should only be visible to admins, and should be muted.","title":"bot-output"},{"location":"config_options/#role_names","text":"These settings map specific roles the bot needs to the actual role names on the guild. If these roles aren't specified, the bot will search for the roles that match the names below. The bot will fail to start if it doesn't find a role. Example role_names : zombie : Brain Eater human : Brain-Box player : Player","title":"role_names"},{"location":"config_options/#zombie","text":"Tagged players will get this role and should have access to click the tag logging button.","title":"zombie"},{"location":"config_options/#human","text":"Tagged players will lose this role and should not have access to click the tag logging button, except for secret OZs.","title":"human"},{"location":"config_options/#player","text":"A role all registered players get. Good for separating game channels from other channels in the guild.","title":"player"},{"location":"config_options/#database_tables","text":"This is a sophisticated set of config options that allows you to define the following: What tables the database has What columns each table has What type of data each column stores The order the columns appear on the Google Sheet A table is a 2-dimensional array of data: like a spreadsheet. Each row is an entry (such as a member or a tag) and each row has the same columns. The bot's database, stored as the file hvzdb.db , contains both tables defined here and behind-the-scenes tables you can't control. The tables defined here collect data from chatbots . The order the columns appear in the config is the order they will appear on the Google Sheet. The bot requires the following tables, columns, and types to function: database_tables : members : id : String name : String faction : String tag_code : String want_bandana : String registration_time : DateTime oz : Boolean tags : tag_id : incrementing_integer tagger_id : String tagger_name : String If any of these are missing from the config, the bot will create them anyways and position them last on the Google Sheet.","title":"database_tables"},{"location":"customized_chatbots/","text":"Customized Chatbots \u00b6 Under Construction This page is a work-in-progress, and will inevitably change. Before reading this page, you should be familiar with everything on the Running the Game page. Beginning \u00b6 Chatbots follow scripts which are a series of questions with information on what to do with the answers. Scripts also have accompanying information on what to do with the entire set of answers, and what to say to the target member. Think of a script like the piece of paper a survey-taker would use. Every script requires a table in the bot's database, where every row is one completed chatbot. Every question needs a column on the table to store the answer. The two big, default, required chatbots are registration and tag_logging . Your HvZ game is unique, and requires questions phrased for your situation. By default, the registration script comes with a question for the member's CPO number (that's the school post-box address). Well, your game may not need that. This page will teach you how to remove that question, add new ones, and customize other things in these chatbot scripts. Scripts are stored in the scripts.yml file, written in the YAML configuration language. It is recommended to use a code editor such as Notepad++ or one one of many other options. If you want to do more than change the phrasing of something, read on. Coming Up Edit script fields Add or remove questions Add chatbots Edit Script Fields \u00b6 Changing text your users see in a chatbot is the easiest thing. Find a phrase in the script and edit it. Surround your text in single quotes if you need to use any of the following special characters: :-{}[]!#|>&%@ , or if your text is only \"yes\", \"no\", \"true\", \"false\", or something similar. See a |- in the file? That means what comes next is a multi-line piece of text that the bot should see as literally multiple lines. If you are unsure about using unusual text, read this reference. Below is an example of a functional tag_logging script similar to the one the bot comes with by default. You can use this as reference as you read onward. Example tag_logging Script tag_logging : table : tags beginning : Let's log a tag. Type 'cancel' at any time to stop this conversation. ending : Tag logged! Make sure your newly-brainless friend feels welcome in the hoard. starting_processor : tag_logging_start ending_processor : tag_logging_end questions : - column : tagged_id display_name : Tag Code query : What is the tag code of the human you tagged? valid_regex : '[a-zA-Z\\d]{6}' rejection_response : 'The tag code is 6 characters of numbers and capital letters. None of these: 0 O Q I 1 D V U 5 S 2 Z' processor : tag_code_to_member_id - column : tag_time display_name : Tag Time query : About what time did the tag happen? Use the format 3:04pm. If it was yesterday, add \"yesterday\" to the end. valid_regex : '(?i)\\d{1,2}:[0-5]?[0-9]\\s?(am|pm)\\s?(yesterday)?' rejection_response : Please use a format like 12:26pm or 7:00 am processor : tag_time Script Fields \u00b6 Concise Reference. script_name : # Name of the script. Only for organization. Required, unique. table : members # Required, unique beginning : Registration started! # Message that appears when the chatbot starts. Optional. ending : Welcome to HvZ! # Message that appears when the chatbot ends. Optional. starting_processor : some_function # Described later in this document. Optional. ending_processor : another_function # Described later in this document. Optional. postable_button_color : green # Chatbot button color: green, red, blurple. Optional. postable_button_label : Click Me! # Visible label on the chatbot button. Optional. questions : # A list of the questions. Required. - column : favorite_color # The database column the answer will go in. No spaces, lower case. Required, unique per script. display_name : Favorite Color # The name of the question the user will see. Required. query : Favorite color? # The question text. Required. valid_regex : '\\D*' # The regex the answer must satisfy. Optional. rejection_response : No numbers allowed in colors. # Response if the answer fails the regex test. Required if there is \"valid_regex\" processor : favorite_color # Described later in this document. Optional <script title> \u00b6 Required, unique In the example above, the word tag_logging at the top declares that everything indented beneath it is the tag_logging script. If this name changes, any existing buttons for this chatbot will break. table \u00b6 Required, unique. Which table the script will be saved to. This table must be defined in the config file; see Config Options: database_tables beginning \u00b6 Optional A message sent when the chatbot starts. It should inform the user that they can type \"cancel\" to stop the chatbot as well. ending \u00b6 Optional A message sent when the chatbot ends. Preferably, it should tell the player what they ought to do next. starting_processor \u00b6 Optional The name of the starting processor function the script should use. Processors are described further below. If you make a new script and haven't made a new processor, this should be removed. starting_processor \u00b6 Optional The name of the ending processor function the script should use. Processors are described further below. If you make a new script and haven't made a new processor, this should be removed. postable_button_color \u00b6 Optional The color of the button used to start the chatbot. Valid values: blurple, gray, green, red, url . These colors are limited by Discord. Green by default. postable_button_label \u00b6 Optional The text that appears on the button used to start the chatbot. If not supplied, this will be the same as the script title. questions \u00b6 Minimum 1 question Questions are indented beneath this heading, marked with a - as shown in the example. They are asked in the order listed here. Question Fields \u00b6 column \u00b6 Required, unique per script The database column the question is saves to. When the bot is working with the question, this is effectively its \"name\". Remember, database column names should be lower case and without spaces. A name like \"most_favorite_color\" is fine. display_name \u00b6 Optional The human-friendly name users are showed when reviewing their responses. query \u00b6 Required The text of the question. Make sure it is concise, but unambiguous for best human results. valid_regex \u00b6 Optional Regex means \"regular_expression\", which is a special language for pattern matching. For example, (?i)(yes|no) is a set of coded symbols that tells the program it needs to match either \"yes\" or \"no\", ignoring case. If valid_regex is provided, the bot will check the question's answer against the regex string, and if it matches completely , the answer is accepted. Note that any leading or trailing whitespace is stripped away from answers before this. There are many resources online for building regex, including this one: regex101.com rejection_response \u00b6 Required if valid_regex is supplied. The response the user is sent if their answer fails the regex test. They are given the opportunity to submit another response until they send a valid one. processor \u00b6 Optional Processors are an advanced feature described in their own section below. They can replace the functionality of regex, and make many checks that regex can't. They can customize their error responses to users, and transform the response into another form. Add or Remove Questions \u00b6 To add a question, these are the basic steps: Add a new question section to a script in scripts.yml via copy-paste Edit the values to your liking, making sure to pick a new column name Add a new column to the database_tables section of config.yml Delete your existing database file hvzdb.db and restart the bot, which will re-create it with your new column. Test the chatbot! When using copy-paste to add a new question, make sure the indentation lines up. Indentation is made with spaces, not tabs. When adding a database column to config.yml , you should set the type to String unless you are using processors. Warning The bot will not add new columns to an existing database. This is called \"migration\" is and something the bot does not support for safety reasons. If you delete your database, the bot will create a fresh one that includes your new columns. If you need to add new columns without deleting your database, use a database editor such as DB Browser for SQLite . You ought to thouroughly test the new question to make sure it looks the way you want, especially if you are using regex or processor functions. To remove a question, these are the basic steps: Delete the question section in its script in scripts.yml Optional: Remove the column from the database table in config.yml , then delete the database and restart the bot to remake it. Having a database column with no corresponding question is perfectly fine, though it will still appear on the Google Sheet.","title":"Customized Chatbots"},{"location":"customized_chatbots/#customized-chatbots","text":"Under Construction This page is a work-in-progress, and will inevitably change. Before reading this page, you should be familiar with everything on the Running the Game page.","title":"Customized Chatbots"},{"location":"customized_chatbots/#beginning","text":"Chatbots follow scripts which are a series of questions with information on what to do with the answers. Scripts also have accompanying information on what to do with the entire set of answers, and what to say to the target member. Think of a script like the piece of paper a survey-taker would use. Every script requires a table in the bot's database, where every row is one completed chatbot. Every question needs a column on the table to store the answer. The two big, default, required chatbots are registration and tag_logging . Your HvZ game is unique, and requires questions phrased for your situation. By default, the registration script comes with a question for the member's CPO number (that's the school post-box address). Well, your game may not need that. This page will teach you how to remove that question, add new ones, and customize other things in these chatbot scripts. Scripts are stored in the scripts.yml file, written in the YAML configuration language. It is recommended to use a code editor such as Notepad++ or one one of many other options. If you want to do more than change the phrasing of something, read on. Coming Up Edit script fields Add or remove questions Add chatbots","title":"Beginning"},{"location":"customized_chatbots/#edit-script-fields","text":"Changing text your users see in a chatbot is the easiest thing. Find a phrase in the script and edit it. Surround your text in single quotes if you need to use any of the following special characters: :-{}[]!#|>&%@ , or if your text is only \"yes\", \"no\", \"true\", \"false\", or something similar. See a |- in the file? That means what comes next is a multi-line piece of text that the bot should see as literally multiple lines. If you are unsure about using unusual text, read this reference. Below is an example of a functional tag_logging script similar to the one the bot comes with by default. You can use this as reference as you read onward. Example tag_logging Script tag_logging : table : tags beginning : Let's log a tag. Type 'cancel' at any time to stop this conversation. ending : Tag logged! Make sure your newly-brainless friend feels welcome in the hoard. starting_processor : tag_logging_start ending_processor : tag_logging_end questions : - column : tagged_id display_name : Tag Code query : What is the tag code of the human you tagged? valid_regex : '[a-zA-Z\\d]{6}' rejection_response : 'The tag code is 6 characters of numbers and capital letters. None of these: 0 O Q I 1 D V U 5 S 2 Z' processor : tag_code_to_member_id - column : tag_time display_name : Tag Time query : About what time did the tag happen? Use the format 3:04pm. If it was yesterday, add \"yesterday\" to the end. valid_regex : '(?i)\\d{1,2}:[0-5]?[0-9]\\s?(am|pm)\\s?(yesterday)?' rejection_response : Please use a format like 12:26pm or 7:00 am processor : tag_time","title":"Edit Script Fields"},{"location":"customized_chatbots/#script-fields","text":"Concise Reference. script_name : # Name of the script. Only for organization. Required, unique. table : members # Required, unique beginning : Registration started! # Message that appears when the chatbot starts. Optional. ending : Welcome to HvZ! # Message that appears when the chatbot ends. Optional. starting_processor : some_function # Described later in this document. Optional. ending_processor : another_function # Described later in this document. Optional. postable_button_color : green # Chatbot button color: green, red, blurple. Optional. postable_button_label : Click Me! # Visible label on the chatbot button. Optional. questions : # A list of the questions. Required. - column : favorite_color # The database column the answer will go in. No spaces, lower case. Required, unique per script. display_name : Favorite Color # The name of the question the user will see. Required. query : Favorite color? # The question text. Required. valid_regex : '\\D*' # The regex the answer must satisfy. Optional. rejection_response : No numbers allowed in colors. # Response if the answer fails the regex test. Required if there is \"valid_regex\" processor : favorite_color # Described later in this document. Optional","title":"Script Fields"},{"location":"customized_chatbots/#script-title","text":"Required, unique In the example above, the word tag_logging at the top declares that everything indented beneath it is the tag_logging script. If this name changes, any existing buttons for this chatbot will break.","title":"&lt;script title&gt;"},{"location":"customized_chatbots/#table","text":"Required, unique. Which table the script will be saved to. This table must be defined in the config file; see Config Options: database_tables","title":"table"},{"location":"customized_chatbots/#beginning_1","text":"Optional A message sent when the chatbot starts. It should inform the user that they can type \"cancel\" to stop the chatbot as well.","title":"beginning"},{"location":"customized_chatbots/#ending","text":"Optional A message sent when the chatbot ends. Preferably, it should tell the player what they ought to do next.","title":"ending"},{"location":"customized_chatbots/#starting_processor","text":"Optional The name of the starting processor function the script should use. Processors are described further below. If you make a new script and haven't made a new processor, this should be removed.","title":"starting_processor"},{"location":"customized_chatbots/#starting_processor_1","text":"Optional The name of the ending processor function the script should use. Processors are described further below. If you make a new script and haven't made a new processor, this should be removed.","title":"starting_processor"},{"location":"customized_chatbots/#postable_button_color","text":"Optional The color of the button used to start the chatbot. Valid values: blurple, gray, green, red, url . These colors are limited by Discord. Green by default.","title":"postable_button_color"},{"location":"customized_chatbots/#postable_button_label","text":"Optional The text that appears on the button used to start the chatbot. If not supplied, this will be the same as the script title.","title":"postable_button_label"},{"location":"customized_chatbots/#questions","text":"Minimum 1 question Questions are indented beneath this heading, marked with a - as shown in the example. They are asked in the order listed here.","title":"questions"},{"location":"customized_chatbots/#question-fields","text":"","title":"Question Fields"},{"location":"customized_chatbots/#column","text":"Required, unique per script The database column the question is saves to. When the bot is working with the question, this is effectively its \"name\". Remember, database column names should be lower case and without spaces. A name like \"most_favorite_color\" is fine.","title":"column"},{"location":"customized_chatbots/#display_name","text":"Optional The human-friendly name users are showed when reviewing their responses.","title":"display_name"},{"location":"customized_chatbots/#query","text":"Required The text of the question. Make sure it is concise, but unambiguous for best human results.","title":"query"},{"location":"customized_chatbots/#valid_regex","text":"Optional Regex means \"regular_expression\", which is a special language for pattern matching. For example, (?i)(yes|no) is a set of coded symbols that tells the program it needs to match either \"yes\" or \"no\", ignoring case. If valid_regex is provided, the bot will check the question's answer against the regex string, and if it matches completely , the answer is accepted. Note that any leading or trailing whitespace is stripped away from answers before this. There are many resources online for building regex, including this one: regex101.com","title":"valid_regex"},{"location":"customized_chatbots/#rejection_response","text":"Required if valid_regex is supplied. The response the user is sent if their answer fails the regex test. They are given the opportunity to submit another response until they send a valid one.","title":"rejection_response"},{"location":"customized_chatbots/#processor","text":"Optional Processors are an advanced feature described in their own section below. They can replace the functionality of regex, and make many checks that regex can't. They can customize their error responses to users, and transform the response into another form.","title":"processor"},{"location":"customized_chatbots/#add-or-remove-questions","text":"To add a question, these are the basic steps: Add a new question section to a script in scripts.yml via copy-paste Edit the values to your liking, making sure to pick a new column name Add a new column to the database_tables section of config.yml Delete your existing database file hvzdb.db and restart the bot, which will re-create it with your new column. Test the chatbot! When using copy-paste to add a new question, make sure the indentation lines up. Indentation is made with spaces, not tabs. When adding a database column to config.yml , you should set the type to String unless you are using processors. Warning The bot will not add new columns to an existing database. This is called \"migration\" is and something the bot does not support for safety reasons. If you delete your database, the bot will create a fresh one that includes your new columns. If you need to add new columns without deleting your database, use a database editor such as DB Browser for SQLite . You ought to thouroughly test the new question to make sure it looks the way you want, especially if you are using regex or processor functions. To remove a question, these are the basic steps: Delete the question section in its script in scripts.yml Optional: Remove the column from the database table in config.yml , then delete the database and restart the bot to remake it. Having a database column with no corresponding question is perfectly fine, though it will still appear on the Google Sheet.","title":"Add or Remove Questions"},{"location":"running_the_game/","text":"Running the Game \u00b6 Core Concepts \u00b6 Permissions and Roles \u00b6 When at all possible, this bot is designed to use Discord permissions and roles to manage the game. When you remove a player's human role and give them a zombie role, they are a zombie. The bot will follow along behind the scenes just fine. Chatbots \u00b6 A chatbot is a conversation the bot holds with a member through private messages to collect information. By default, the bot comes with two: registration, and tag_logging. Chatbots are launched when the member clicks a button created by the post_button command, or when an admin uses the tag create / member register commands. Set up the bot and try one out! OZs \u00b6 An OZ is an Original Zombie: a zombie who is set up by the admins. Every game must begin with one or more OZs. As far as this bot is concerned, an OZ is a player who can click the tag_logging button even if they are human. There is an OZ command which is recommended, but that is merely an aid for convenience and to make later statistics easier. Items \u00b6 In a game of HvZ, admins often give out special items to players. Zombies get pool noodles to tag from a distance, humans get armor for an extra life, etc. Sometimes you want to track who has what item. The items system is a simple way to connect items to players on the Discord server. Items are just names you make up and assign to a player, which you can then transfer around between players or take away. A gloried notepad really. Players never see these items: it is purely a system for admin tracking. Everything to do with the item system can be found here: Commands: Items Chronology of a Game \u00b6 Registration \u00b6 To register Discord server members for the game, simply allow them to click a registration button . Registered users are then entered into the database, assigned generated tag codes, and ready to play. Players need to be given their tag codes before they can be tagged. At LeTourneau University, players were given green bandanas with their tag codes written in marker by the admins. In this case, the admins would just refer to the Google Sheet for these codes. Another option is to let players keep their own tag codes, such as on a piece of paper. They can retrieve them with the code command. Set up OZs \u00b6 In the default registration chatbot script, there is a field for players to request or deny being an OZ. If you keep this field, it's a great way to narrow the pool of players to select from. Regardless of how you select the OZs, the game begins when they make their first tag. Using the OZ command is a nice way to allow them into the appropriate channel without revealing their identity to the server. You should consider using the silent_oz config option at this point. Once the OZs are publically revealed, it is a good idea to give them the zombie role and remove their human role, since there's no pretense of secrecy anymore. Manage the Game \u00b6 After zombies are loose, the bot mostly handles everything, leaving you to deal with problems out in the real world. Zombies will use the tag logging chatbot to turn humans into zombies, the tags get announced in the appropriate channel, and the zombie channel starts getting more active. You should probably post with the tag tree command every so often to show players the dangerous zombies. There typically comes a point in the game where you will accept no new players. Use the registration config option to disallow new players, or make the registration channel inaccessible. When players use the bot wrong, or have disputes, or have some edge-case that I haven't thought of because they're human, use the various commands to manage it all. If you really get stuck, email the developer for help ( conneranderson.dev@gmail.com ) or submit an issue on the github . Conclude the Game \u00b6 Once the final mission comes or whatever you decide should stop zombie tagging, simply tag_logging config option to stop tagging, or restrict the tag logging channel. That's it! Make sure to save the contents of the Google Sheet somewhere safe for reference. If you're going to use the server for other things when not playing HvZ, you can remove roles until all the unneeded channels become invisible, then put those channels into a category to keep until next time.","title":"Running the Game"},{"location":"running_the_game/#running-the-game","text":"","title":"Running the Game"},{"location":"running_the_game/#core-concepts","text":"","title":"Core Concepts"},{"location":"running_the_game/#permissions-and-roles","text":"When at all possible, this bot is designed to use Discord permissions and roles to manage the game. When you remove a player's human role and give them a zombie role, they are a zombie. The bot will follow along behind the scenes just fine.","title":"Permissions and Roles"},{"location":"running_the_game/#chatbots","text":"A chatbot is a conversation the bot holds with a member through private messages to collect information. By default, the bot comes with two: registration, and tag_logging. Chatbots are launched when the member clicks a button created by the post_button command, or when an admin uses the tag create / member register commands. Set up the bot and try one out!","title":"Chatbots"},{"location":"running_the_game/#ozs","text":"An OZ is an Original Zombie: a zombie who is set up by the admins. Every game must begin with one or more OZs. As far as this bot is concerned, an OZ is a player who can click the tag_logging button even if they are human. There is an OZ command which is recommended, but that is merely an aid for convenience and to make later statistics easier.","title":"OZs"},{"location":"running_the_game/#items","text":"In a game of HvZ, admins often give out special items to players. Zombies get pool noodles to tag from a distance, humans get armor for an extra life, etc. Sometimes you want to track who has what item. The items system is a simple way to connect items to players on the Discord server. Items are just names you make up and assign to a player, which you can then transfer around between players or take away. A gloried notepad really. Players never see these items: it is purely a system for admin tracking. Everything to do with the item system can be found here: Commands: Items","title":"Items"},{"location":"running_the_game/#chronology-of-a-game","text":"","title":"Chronology of a Game"},{"location":"running_the_game/#registration","text":"To register Discord server members for the game, simply allow them to click a registration button . Registered users are then entered into the database, assigned generated tag codes, and ready to play. Players need to be given their tag codes before they can be tagged. At LeTourneau University, players were given green bandanas with their tag codes written in marker by the admins. In this case, the admins would just refer to the Google Sheet for these codes. Another option is to let players keep their own tag codes, such as on a piece of paper. They can retrieve them with the code command.","title":"Registration"},{"location":"running_the_game/#set-up-ozs","text":"In the default registration chatbot script, there is a field for players to request or deny being an OZ. If you keep this field, it's a great way to narrow the pool of players to select from. Regardless of how you select the OZs, the game begins when they make their first tag. Using the OZ command is a nice way to allow them into the appropriate channel without revealing their identity to the server. You should consider using the silent_oz config option at this point. Once the OZs are publically revealed, it is a good idea to give them the zombie role and remove their human role, since there's no pretense of secrecy anymore.","title":"Set up OZs"},{"location":"running_the_game/#manage-the-game","text":"After zombies are loose, the bot mostly handles everything, leaving you to deal with problems out in the real world. Zombies will use the tag logging chatbot to turn humans into zombies, the tags get announced in the appropriate channel, and the zombie channel starts getting more active. You should probably post with the tag tree command every so often to show players the dangerous zombies. There typically comes a point in the game where you will accept no new players. Use the registration config option to disallow new players, or make the registration channel inaccessible. When players use the bot wrong, or have disputes, or have some edge-case that I haven't thought of because they're human, use the various commands to manage it all. If you really get stuck, email the developer for help ( conneranderson.dev@gmail.com ) or submit an issue on the github .","title":"Manage the Game"},{"location":"running_the_game/#conclude-the-game","text":"Once the final mission comes or whatever you decide should stop zombie tagging, simply tag_logging config option to stop tagging, or restrict the tag logging channel. That's it! Make sure to save the contents of the Google Sheet somewhere safe for reference. If you're going to use the server for other things when not playing HvZ, you can remove roles until all the unneeded channels become invisible, then put those channels into a category to keep until next time.","title":"Conclude the Game"},{"location":"setup/","text":"Setup \u00b6 Server Setup \u00b6 Channels \u00b6 Your Discord server must have the channel_names section configured in config.yml to function. Please see Config Options: channel_names for information. You can change these channels later, but the bot must have permission to view and post in these channels. To play the game, server members need a way to click the registration button, and zombies need a way to click the tag logging button. Let's create those now. Go the channel you want the registration button in. It is recommended that this channel be one dedicated to information about the game. Send the command /post_button and selection \"registration\" as the button_1 option. If you're unfamiliar with Discord Slash Commands, look here: Commands Overview Info If you don't like where the registration button sits in the channel, you can always delete it and try again later. The buttons are quite forgiving. Do the same for the tag_logging button in the same channel you configured as the report-tags channel. You can get creative and post this button in other places too, but be warned: anyone who can click the button can try to log a tag, even humans. It is designed this way so you are responsible for setting up the server roles, permissions, and channels to keep humans and zombies where you want them. It is also recommended that you create a channel purely for sending the bot commands, and leave it muted. No need to clutter up other channels with that. Remember to give the bot access to it. Setup admin roles Roles \u00b6 Your Discord server must have the roles section configured as well. See Config Options: role_names for information. Ensure you have a role for each faction, and one for all players. The bot must have permission to manage these roles , meaning they have to be lower than it in the role hierarchy. Commands \u00b6 Discord lets you manage command permissions through Server Settings / Integrations / [Your Bot] . Here you can give permissions to certain members and roles to use categories of commands. By default, everyone can use everything. That's bad, so restrict most commands to only your admins. The /code command is designed to be used by players though.","title":"Setup"},{"location":"setup/#setup","text":"","title":"Setup"},{"location":"setup/#server-setup","text":"","title":"Server Setup"},{"location":"setup/#channels","text":"Your Discord server must have the channel_names section configured in config.yml to function. Please see Config Options: channel_names for information. You can change these channels later, but the bot must have permission to view and post in these channels. To play the game, server members need a way to click the registration button, and zombies need a way to click the tag logging button. Let's create those now. Go the channel you want the registration button in. It is recommended that this channel be one dedicated to information about the game. Send the command /post_button and selection \"registration\" as the button_1 option. If you're unfamiliar with Discord Slash Commands, look here: Commands Overview Info If you don't like where the registration button sits in the channel, you can always delete it and try again later. The buttons are quite forgiving. Do the same for the tag_logging button in the same channel you configured as the report-tags channel. You can get creative and post this button in other places too, but be warned: anyone who can click the button can try to log a tag, even humans. It is designed this way so you are responsible for setting up the server roles, permissions, and channels to keep humans and zombies where you want them. It is also recommended that you create a channel purely for sending the bot commands, and leave it muted. No need to clutter up other channels with that. Remember to give the bot access to it. Setup admin roles","title":"Channels"},{"location":"setup/#roles","text":"Your Discord server must have the roles section configured as well. See Config Options: role_names for information. Ensure you have a role for each faction, and one for all players. The bot must have permission to manage these roles , meaning they have to be lower than it in the role hierarchy.","title":"Roles"},{"location":"setup/#commands","text":"Discord lets you manage command permissions through Server Settings / Integrations / [Your Bot] . Here you can give permissions to certain members and roles to use categories of commands. By default, everyone can use everything. That's bad, so restrict most commands to only your admins. The /code command is designed to be used by players though.","title":"Commands"}]}